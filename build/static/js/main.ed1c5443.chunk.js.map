{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","password","setPassword","isAlpha","setIfAlpha","isSpec","setIfSpec","len","setLen","error","setError","copied","setCopied","setL","value","className","src","onClick","navigator","clipboard","writeText","height","width","type","checked","onChange","state","res","list","undefined","i","n","Math","random","length","push","join","gen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMA4HeA,EAhHH,WAAO,IAAD,EACgBC,mBAAS,mBADzB,mBACTC,EADS,KACCC,EADD,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGYJ,oBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,OAIMN,mBAAS,IAJf,mBAITO,EAJS,KAIJC,EAJI,OAKUR,mBAAS,IALnB,mBAKTS,EALS,KAKFC,EALE,OAMYV,mBAAS,IANrB,mBAMTW,EANS,KAMDC,EANC,KA0BVC,EAAO,SAACC,GACZ,OAAIA,EAAQ,EACHJ,EAAS,8BACTI,EAAQ,GACRJ,EAAS,6BAClBA,EAAS,IACFF,EAAOM,KAUhB,OACE,sBAAKC,UAAU,MAAf,UACE,mBAAGA,UAAU,QAAb,gCACA,qBAAKA,UAAU,aACf,sBAAKA,UAAU,SAAf,UACE,mBACEA,UAAU,aADZ,SAEEd,IACF,qBACEc,UAAU,aACVC,IAAI,8DACJC,QAlBO,WACb,GAAiB,oBAAbhB,EACF,OAAOS,EAAS,2CAClBQ,UAAUC,UAAUC,UAAUnB,GAC9BW,EAAU,wCAeJS,OAAQ,GACRC,MAAO,QAGX,mBAAGP,UAAU,WAAb,SAAyBN,IACzB,mBACEM,UAAU,kBADZ,SAEEJ,IACF,gCACE,mBACEI,UAAU,aADZ,wBAGA,uBACEQ,KAAK,SACLN,QAAS,kBAAMJ,EAAKN,EAAM,IAC1BO,MAAM,IACNC,UAAU,yBAEZ,oBACEA,UAAU,wBADZ,cAEGR,EAFH,OAGA,uBACEgB,KAAK,SACLN,QAAS,kBAAMJ,EAAKN,EAAM,IAC1BO,MAAM,IACNC,UAAU,4BAGd,gCACE,gCACE,uBACEQ,KAAK,WACLC,QAASrB,EACTsB,SAAU,SAACC,GAAD,OAAWtB,GAAYD,IACjCY,UAAU,WAEZ,mBAAGA,UAAU,eAAb,kCAEF,gCACE,uBACEQ,KAAK,WACLC,QAASnB,EACToB,SAAU,SAACC,GAAD,OAAWpB,GAAWD,IAChCU,UAAU,WAEZ,mBAAGA,UAAU,eAAb,gDAGJ,uBACEQ,KAAK,SACLT,MAAM,WACNG,QAAS,kBAjGH,WACV,IAAIU,EAAM,GACNC,OAAOC,EAGTD,EADEzB,EACME,EAnBF,yFADD,iEAsBGA,EAxBH,qCACD,aAyBN,IAAK,IAAIyB,EAAI,EAAGA,EAAIvB,IAAOuB,EAAG,CAC5B,IAAIC,EArBG,EAqBMC,KAAKC,UAAYL,EAAKM,OAAS,GAC5CP,EAAIQ,KAAKP,EAAKG,IAIhB,OAFArB,EAAS,IACTE,EAAU,IACHV,EAAYyB,EAAIS,KAAK,KAkFTC,IACftB,UAAU,sBCxGHuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ed1c5443.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst ns = '0123456789,;:=?./+ù%^$*][}{)(-_';\nconst n = '0123456789';\nconst na = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst nas = 'abcdefghijklmnopqrstuvwxyz0123456789,;:=?./+ù%^$*][}{)(-_ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst ftoi = (a: number) => {\n  return a | 0\n}\n\nconst App = () => {\n  const [password, setPassword] = useState('Your password !');\n  const [isAlpha, setIfAlpha] = useState(true);\n  const [isSpec, setIfSpec] = useState(true);\n  const [len, setLen] = useState(12);\n  const [error, setError] = useState('');\n  const [copied, setCopied] = useState('');\n\n  const gen = () => {\n    let res = [];\n    let list = undefined;\n\n    if (isAlpha)\n      list = (isSpec ? nas : na)\n    else\n      list = (isSpec ? ns : n)\n\n    for (let i = 0; i < len; ++i) {\n      let n = ftoi(Math.random() * (list.length - 1))\n      res.push(list[n]);\n    }\n    setError('')\n    setCopied('')\n    return setPassword(res.join(''));\n  }\n\n  const setL = (value: number) => {\n    if (value < 8)\n      return setError('Length cannot be under 8 !')\n    else if (value > 30)\n      return setError('Length can be up to 30 !')\n    setError('')\n    return setLen(value);\n  }\n\n  const toClip = () => {\n    if (password === 'Your password !')\n      return setError('Generate a password before copying it !')\n    navigator.clipboard.writeText(password)\n    setCopied('Password copied in your clipboard !')\n  }\n\n  return (\n    <div className=\"App\">\n      <p className=\"title\">Password generator</p>\n      <div className=\"gradient\"/>\n      <div className=\"pswDiv\">\n        <p\n          className=\"rowDiv psw\"\n        >{password}</p>\n        <img\n          className=\"rowDiv img\"\n          src=\"https://img.icons8.com/material-outlined/48/000000/copy.png\"\n          onClick={toClip}\n          height={20}\n          width={20}\n        />\n      </div>\n      <p className=\"errorMsg\">{error}</p>\n      <p\n        className=\"errorMsg copied\"\n      >{copied}</p>\n      <div>\n        <p\n          className=\"rowDiv psw\"\n        > Length : </p>\n        <input\n          type=\"button\"\n          onClick={() => setL(len - 1)}\n          value='-'\n          className=\"button rowDiv size30\"\n        />\n        <p\n          className=\"rowDiv size30 textCol\"\n        > {len} </p>\n        <input\n          type=\"button\"\n          onClick={() => setL(len + 1)}\n          value='+'\n          className=\"button rowDiv size30\"\n        />\n      </div>\n      <div>\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={isAlpha}\n            onChange={(state) => setIfAlpha(!isAlpha)}\n            className=\"rowDiv\"\n          />\n          <p className=\"rowDiv check\"> Include Letters </p>\n        </div>\n        <div>\n          <input\n            type=\"checkbox\"\n            checked={isSpec}\n            onChange={(state) => setIfSpec(!isSpec)}\n            className=\"rowDiv\"\n          />\n          <p className=\"rowDiv check\"> Include special characters </p>\n        </div>\n      </div>\n      <input\n        type=\"button\"\n        value=\"Generate\"\n        onClick={() => gen()}\n        className=\"button genBtn\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}